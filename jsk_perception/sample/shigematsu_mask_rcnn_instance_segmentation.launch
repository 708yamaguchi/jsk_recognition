<launch>

  <arg name="gui" default="true" />
  <arg name="gpu" default="0" />

  <node name="image_publisher"
        pkg="jsk_perception" type="image_publisher.py"
        clear_params="true">
    <rosparam subst_value="true">
      # file_name: $(find jsk_perception)/sample/object_detection_example_1.jpg
      file_name: $(find jsk_perception)/sample/sample_drill.jpg
      fps: 30
    </rosparam>
  </node>
  <arg name="INPUT_IMAGE" default="/multisense/left/image_color" />

  <!-- <arg name="INPUT_IMAGE" value="/multisense/left/image_color" /> -->
  
  <node name="mask_rcnn_instance_segmentation"
        pkg="jsk_perception" type="mask_rcnn_instance_segmentation.py"
        clear_params="true" output="screen">
    <remap from="~input" to="$(arg INPUT_IMAGE)" />
    <rosparam subst_value="true">
      gpu: $(arg gpu)
      pretrained_model: $(find jsk_perception)/trained_data/mask_rcnn_third_dataset_20180411.npz
      n_layers: 101      
      anchor_scales: [8, 16, 32]
      rpn_hidden: 512
      fg_class_names:
      - drill
      - bambooshoot_drill 
      - watering_can
      - tape
      - gley_mop
      - blue_mop
      - swisstools
      - bucket
      - spray
      - screw_drill
      - blue_box
      - ladder 
    </rosparam>
  </node>

  <!-- use cluster_indices and labels -->
  <node name="image_cluster_indices_decomposer"
        pkg="jsk_perception" type="image_cluster_indices_decomposer.py"
        clear_params="true">
    <remap from="~input" to="$(arg INPUT_IMAGE)" />
    <remap from="~input/cluster_indices"
           to="mask_rcnn_instance_segmentation/output/cluster_indices" />
  </node>

  <!-- use lbl_cls and lbl_ins -->
  <node name="label_cls_to_mask"
        pkg="jsk_perception" type="label_to_mask_image"
        clear_params="true">
    <remap from="~input" to="mask_rcnn_instance_segmentation/output/label_cls" />
    <rosparam subst_value="true">
      label_value: 2
    </rosparam>
  </node>

  <node name="mask_image_to_point_indices"
        pkg="jsk_pcl_ros_utils" type="mask_image_to_point_indices"
        clear_params="true">
    <remap from="~input" to="label_cls_to_mask/output" />
  </node>

  <node name="point_indices_to_cluster_point_indices"
        pkg="jsk_pcl_ros_utils" type="point_indices_to_cluster_point_indices"
        clear_params="true">
    <remap from="~input" to="mask_image_to_point_indices/output" />
  </node>

  <!-- <node name="extract_indices_target_label" -->
  <!--       pkg="jsk_pcl_ros" type="extract_indices" -->
  <!-- 	clear_params="true"> -->
  <!--   <remap from="~input" to="/multisense_local/organized_image_points2_color" /> -->
  <!--   <remap from="~indices" to="mask_image_to_point_indices/output" /> -->
  <!--   <rosparam> -->
  <!--     approximate_sync: true -->
  <!--     queue_size: 100 -->
  <!--     keep_organized: true -->
  <!--   </rosparam> -->
  <!-- </node> -->

  <!-- <node name="pc_transformer" pkg="jsk_pcl_ros" type="tf_tranform_cloud" clear_params="true" -->
  <!--       output="screen"> -->
  <!--   <remap from="~input" to="/multisense_local/organized_image_points2_color" /> -->
  <!--   <rosparam> -->
  <!--     target_frame_id: /ground -->
  <!--   </rosparam> -->
  <!-- </node> -->


  <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />
  <node pkg="nodelet" type="nodelet" name="cloud_from_ground" args="load jsk_pcl/TfTransformCloud pcl_manager">
    <remap from="~input" to="/multisense_local/organized_image_points2_color" />
    <rosparam>
      target_frame_id: /ground
    </rosparam>
  </node>
  
  <!-- <node name="cluster_indices_decomposer" -->
  <!--       pkg="nodelet" type="nodelet" -->
  <!-- 	args="load jsk_pcl/ClusterPointIndicesDecomposer pcl_manager"> -->
  <!--   <remap from="~input" to="/cloud_from_ground/output" /> -->
  <!--   <remap from="~target" to="/point_indices_to_cluster_point_indices/output" /> -->
  <!-- </node> -->

  <node name="cluster_indices_decomposer"
        pkg="jsk_pcl_ros" type="cluster_point_indices_decomposer"
  	clear_params="true">
  <remap from="~input" to="/cloud_from_ground/output" />
  <remap from="~target" to="/point_indices_to_cluster_point_indices/output" />
  </node>

  <node pkg="nodelet" type="nodelet" name="euclidean_manager" args="manager" output="screen" />
  <node name="euclidean_clustering"
        pkg="nodelet" type="nodelet"
        args="load jsk_pcl/EuclideanClustering euclidean_manager">
    <remap from="~input" to="/cluster_indices_decomposer/debug_output" />  <!-- depth timestamp -->
    <rosparam>
      min_size: 10
      max_size: 10000
      tolerance: 0.05
      lable_tracking_tolerance: 0.8
    </rosparam>
  </node>

  <node name="euclidean_cluster_indices_decomposer"
        pkg="jsk_pcl_ros" type="cluster_point_indices_decomposer"
	clear_params="true">
    <remap from="~input" to="/cluster_indices_decomposer/debug_output" />  <!-- depth timestamp -->
    <remap from="~target" to="/euclidean_clustering/output" />  <!-- depth timestamp -->
  </node>

  <node name="apply_mask_image"
        pkg="jsk_perception" type="apply_mask_image"
        clear_params="true">
    <remap from="~input" to="mask_rcnn_instance_segmentation/output/label_ins" />
    <remap from="~input/mask" to="label_cls_to_mask/output" />
    <rosparam subst_value="true">
      clip: false
      cval: -1
    </rosparam>
  </node>

  <node name="label_image_decomposer"
        pkg="jsk_perception" type="label_image_decomposer.py"
        clear_params="true">
    <remap from="~input" to="$(arg INPUT_IMAGE)" />
    <remap from="~input/label" to="apply_mask_image/output" />
    <rosparam subst_value="true">
      bg_label: -1
    </rosparam>
  </node>

  <node name="tile_image"
        pkg="jsk_perception" type="tile_image.py"
        clear_params="true">
    <rosparam subst_value="true">
      input_topics:
        - $(arg INPUT_IMAGE)
        - mask_rcnn_instance_segmentation/output/viz
        - image_cluster_indices_decomposer/output
        - label_image_decomposer/output/label_viz
      draw_topic_name: true
      font_scale: 0.8
      font_thickness: 2
    </rosparam>
  </node>

  <group if="$(arg gui)">
    <node name="image_view"
          pkg="image_view" type="image_view"
          clear_params="true">
      <remap from="image" to="tile_image/output" />
    </node>
  </group>

</launch>
